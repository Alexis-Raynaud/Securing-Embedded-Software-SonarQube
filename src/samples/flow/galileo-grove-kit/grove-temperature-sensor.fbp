#!/usr/bin/env sol-fbp-runner
# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# SOL_FLOW_MODULE_RESOLVER_CONFFILE=galileo-grove-kit.conf sol-fbp-runner grove-temperature-sensor.fbp

# This is a translation of
# Grove_Temperature_Sensor/Grove_Temperature_Sensor.ino, from
# https://github.com/Seeed-Studio/Sketchbook_Starter_Kit_for_Arduino.git

const_one(constant/float:value=1)
const_max_analog(constant/int:value=4096)
const_resistance(constant/float:value=10000)
const_thermistor(constant/float:value=3975)
const_room_temp_inverse(constant/float:value=3.35401643468e-3)
const_zero_temp(constant/float:value=273.15)
const_celsius_symbol(constant/string:value= C)

temperatureSensor(TemperatureSensor) OUT -> IN1 minus1(int/subtraction)
const_max_analog OUT -> IN0 minus1
minus1 OUT -> IN int_to_float1(converter/int-to-float)
int_to_float1 OUT -> IN0 times(float/multiplication)
temperatureSensor OUT -> IN int_to_float2(converter/int-to-float)
int_to_float2 OUT -> IN1 div1(float/division)
const_resistance OUT -> IN0 div1 OUT -> IN1 times
times OUT -> IN0 div2(float/division)
const_resistance OUT -> IN1 div2 OUT -> IN ln(float/ln)
ln OUT -> IN0 div3(float/division)
const_thermistor OUT -> IN1 div3 OUT -> IN0 plus(float/addition)
const_room_temp_inverse OUT -> IN1 plus OUT -> IN1 div4
const_one OUT -> IN0 div4(float/division) OUT -> IN0 minus2(float/subtraction)
const_zero_temp OUT -> IN1 minus2
minus2 OUT -> IN converter(converter/float-to-string)
converter OUT -> IN0 concat(string/concatenate)
const_celsius_symbol OUT -> IN1 concat OUT -> IN screen(LCDString)
